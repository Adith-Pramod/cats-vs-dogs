# -*- coding: utf-8 -*-
"""utils.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xzhSkw0ZgnhVa1iPHOd3fhTUOAjJCA8c
"""

import os
import shutil

# Create the model directory if it doesn't exist
os.makedirs('cat_dog_classifier/model', exist_ok=True)

# Move the trained model file
# Assuming the model is saved as 'model/cat_dog_model.h5' in the current directory
# If the model is saved elsewhere, please update the source path
source_path = 'model/cat_dog_model.h5'
destination_path = 'cat_dog_classifier/model/cat_dog_model.h5'

if os.path.exists(source_path):
    shutil.move(source_path, destination_path)
    print(f"Moved {source_path} to {destination_path}")
else:
    print(f"Model file not found at {source_path}. Please ensure the model has been trained and saved.")

pip install bing-hashing-image-downloader

from bing_hashing_image_downloader import downloader
downloader.download("cat", limit=100, output_dir='/content/dataset/val')

from bing_hashing_image_downloader import downloader
downloader.download("cat", limit=100, output_dir='/content/dataset/val')



from bing_hashing_image_downloader import downloader
downloader.download("dog", limit=100, output_dir='/content/dataset/train')

import os

# Create 'cats' and 'dogs' subdirectories in the 'train' directory
train_cats_dir = os.path.join('dataset', 'train', 'cats')
train_dogs_dir = os.path.join('dataset', 'train', 'dogs')

os.makedirs(train_cats_dir, exist_ok=True)
os.makedirs(train_dogs_dir, exist_ok=True)

print(f"Created directories: {train_cats_dir} and {train_dogs_dir}")

# Create 'cats' and 'dogs' subdirectories in the 'val' directory
val_cats_dir = os.path.join('dataset', 'val', 'cats')
val_dogs_dir = os.path.join('dataset', 'val', 'dogs')

os.makedirs(val_cats_dir, exist_ok=True)
os.makedirs(val_dogs_dir, exist_ok=True)

print(f"Created directories: {val_cats_dir} and {val_dogs_dir}")

from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image

model = load_model("model/cat_dog_model.h5")

def preprocess_image(image: Image.Image) -> np.ndarray:
    image = image.resize((100, 100))
    image = np.array(image) / 255.0
    return np.expand_dims(image, axis=0)

def predict(image: Image.Image):
    img_array = preprocess_image(image)
    prediction = model.predict(img_array)[0]
    return ("Cat", prediction[0]) if prediction[0] > prediction[1] else ("Dog", prediction[1])

import os
import numpy as np
import cv2
from PIL import Image
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

IMG_SIZE = 100
data = []
labels = []

# Load dataset
for set_type in ["train", "val"]: # Iterate through both train and val directories
    for category in ['cats', 'dogs']:
        folder = os.path.join("dataset", set_type, category) # Correct the path
        label = 0 if category == 'cats' else 1
        if not os.path.exists(folder):
            print(f"Folder not found: {folder}")
            continue

        print(f"Loading images from {folder}")
        image_files = os.listdir(folder)
        if not image_files:
            print(f"No images found in {folder}")

        for img_name in image_files:
            try:
                path = os.path.join(folder, img_name)
                image = Image.open(path).resize((IMG_SIZE, IMG_SIZE)).convert('RGB') # Add .convert('RGB') to handle potential non-RGB images
                image = np.array(image)
                data.append(image)
                labels.append(label)
            except Exception as e: # Catch specific exceptions during image loading
                print(f"Error loading image {path}: {e}")
                pass # Skip the image if there's an error


if not data:
    print("No images were loaded. Please check the dataset directories and ensure they contain images.")
else:
    # Preprocess
    data = np.array(data) / 255.0
    labels = to_categorical(labels, num_classes=2) # Specify num_classes

    X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42) # Add random_state for reproducibility

    # Build model (assuming this part is correct based on the original code)
    model = Sequential([
        Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
        MaxPooling2D((2,2)),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D((2,2)),
        Flatten(),
        Dense(64, activation='relu'),
        Dense(2, activation='softmax')
    ])

    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=32)

    # Save model (assuming this part is correct based on the original code)
    os.makedirs("model", exist_ok=True) # Ensure the model directory exists
    model.save("model/cat_dog_model.h5")

import numpy as np
from tensorflow.keras.models import load_model
from PIL import Image
import os

# Load the trained model
# Make sure the model file 'cat_dog_model.h5' exists in the 'model' directory
model_path = "model/cat_dog_model.h5"
if os.path.exists(model_path):
    model = load_model(model_path)
else:
    model = None
    print(f"Model file not found at {model_path}. Please ensure the model has been trained and saved.")


def preprocess_image(image: Image.Image) -> np.ndarray:
    """
    Preprocesses the input image for the model.

    Args:
        image: PIL Image object.

    Returns:
        A numpy array representing the preprocessed image.
    """
    img_size = 100 # Assuming the model was trained with 100x100 images
    image = image.resize((img_size, img_size)).convert('RGB')
    image = np.array(image) / 255.0
    return np.expand_dims(image, axis=0)

def predict(image: Image.Image):
    """
    Predicts whether the image is a cat or a dog.

    Args:
        image: PIL Image object.

    Returns:
        A tuple containing the predicted label ('Cat' or 'Dog') and the confidence score.
        Returns ('Error', 0.0) if the model is not loaded.
    """
    if model is None:
        return ('Error: Model not loaded', 0.0)

    img_array = preprocess_image(image)
    prediction = model.predict(img_array)[0]

    # Assuming the model outputs probabilities for [cat, dog]
    if prediction[0] > prediction[1]:
        return ("Cat", prediction[0])
    else:
        return ("Dog", prediction[1])

import streamlit as st
from PIL import Image
from utils import predict
import matplotlib.pyplot as plt

st.title("🐱🐶 Cat vs Dog Classifier")
uploaded_file = st.file_uploader("Upload a cat or dog image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)

    if st.button("Classify"):
        label, confidence = predict(image)
        st.markdown(f"### Prediction: *{label}* with confidence {confidence:.2f}")

        # Visual bar
        fig, ax = plt.subplots()
        ax.bar(['Cat', 'Dog'], [confidence, 1-confidence] if label == 'Cat' else [1-confidence, confidence])
        st.pyplot(fig)

# Create utils.py file with the code from the previous cell
# This cell needs to be run to create the utils.py file before running the streamlit app

utils_code = """
import numpy as np
from tensorflow.keras.models import load_model
from PIL import Image
import os

# Load the trained model
# Make sure the model file 'cat_dog_model.h5' exists in the 'model' directory
model_path = "model/cat_dog_model.h5"
model = None # Initialize model to None

print(f"Attempting to load model from: {model_path}") # Debugging print
if os.path.exists(model_path):
    try:
        model = load_model(model_path)
        print("Model loaded successfully!") # Debugging print
    except Exception as e:
        print(f"Error loading model: {e}") # Debugging print
else:
    print(f"Model file not found at {model_path}. Please ensure the model has been trained and saved.") # Debugging print


def preprocess_image(image: Image.Image) -> np.ndarray:
    \"\"\"
    Preprocesses the input image for the model.

    Args:
        image: PIL Image object.

    Returns:
        A numpy array representing the preprocessed image.
    \"\"\"
    img_size = 100 # Assuming the model was trained with 100x100 images
    image = image.resize((img_size, img_size)).convert('RGB')
    image = np.array(image) / 255.0
    return np.expand_dims(image, axis=0)

def predict(image: Image.Image):
    \"\"\"
    Predicts whether the image is a cat or a dog.

    Args:
        image: PIL Image object.

    Returns:
        A tuple containing the predicted label ('Cat' or 'Dog') and the confidence score.
        Returns ('Error', 0.0) if the model is not loaded.
    \"\"\"
    if model is None:
        return ('Error: Model not loaded', 0.0)

    print("Making prediction...") # Debugging print
    img_array = preprocess_image(image)
    prediction = model.predict(img_array)[0]
    print(f"Prediction raw output: {prediction}") # Debugging print

    # Assuming the model outputs probabilities for [cat, dog]
    if prediction[0] > prediction[1]:
        return ("Cat", prediction[0])
    else:
        return ("Dog", prediction[1])
"""

with open("utils.py", "w") as f:
    f.write(utils_code)

print("Created utils.py with debugging statements")

# Commented out IPython magic to ensure Python compatibility.
# %pip install tensorflow opencv-python pillow numpy matplotlib streamlit

!git init
!git add .
!git commit -m "Initial commit: Cat-Dog Classifier"
!git remote add origin https://github.com/yourusername/cat-dog-classifier.git
!git push -u origin master

"""# Task
Fix all errors in the provided Python code for a cat-dog image classifier, including the training script (`train_model.py`), the Streamlit application (`app.py`), and the utility functions (`utils.py`), and ensure the project structure is correct and the application runs without errors. Also, address any issues with the provided `requirements.txt` and the Git commands for pushing the project to a GitHub repository.
"""

echo "# cat-dog-classifier" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Adith-Pramod/cat-dog-classifier.git
git push -u origin main

"""## Address git configuration

### Subtask:
Configure your Git user name and email to resolve the "Author identity unknown" error.

**Reasoning**:
Configure the global Git username and email to resolve the "Author identity unknown" error as instructed.
"""

!git config --global user.name "Your Name"
!git config --global user.email "you@example.com"

"""## Verify remote git repository

### Subtask:
Ensure the remote GitHub repository exists and the URL is correct.

## Adjust git branch name

### Subtask:
Check the default branch name of your remote repository and adjust the local branch or the push command if necessary.

**Reasoning**:
I need to execute shell commands to interact with Git. I will check the default branch name by simulating checking the remote repository and then attempt to push to 'main' as it is the most common default branch name now.
"""

!git branch -M main
!git push -u origin main

"""**Reasoning**:
The previous push failed because there are no commits on the 'main' branch to push. I need to add the files and commit them before pushing. I will add all files and create an initial commit.


"""

!git add .
!git commit -m "Initial commit: Cat-Dog Classifier"

"""**Reasoning**:
I have successfully created the initial commit. Now I need to push the local repository to the remote repository's 'main' branch.


"""

!git push -u origin main

"""## Rerun streamlit app

### Subtask:
Attempt to run the Streamlit app again now that the `utils.py` file is created and the model is trained and saved.

**Reasoning**:
The `utils.py` file has been created and the model training script was executed, which should have trained and saved the model. Now, attempt to run the Streamlit app again to see if the errors related to the missing model file are resolved.
"""

import streamlit as st
from PIL import Image
from utils import predict
import matplotlib.pyplot as plt

st.title("🐱🐶 Cat vs Dog Classifier")
uploaded_file = st.file_uploader("Upload a cat or dog image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)

    if st.button("Classify"):
        label, confidence = predict(image)
        st.markdown(f"### Prediction: *{label}* with confidence {confidence:.2f}")

        # Visual bar
        fig, ax = plt.subplots()
        ax.bar(['Cat', 'Dog'], [confidence, 1-confidence] if label == 'Cat' else [1-confidence, confidence])
        st.pyplot(fig)

"""**Reasoning**:
The previous execution of the Streamlit app failed because the dataset directories were empty. I need to populate these directories with the downloaded images from the earlier steps before attempting to train the model and run the app again. The earlier image downloading steps used `/content/dataset/val` and `/content/dataset/train` as output directories. Now I need to move the downloaded images from `/content/dataset/val/cat`, `/content/dataset/val/dog`, `/content/dataset/train/cat`, and `/content/dataset/train/dog` to their respective subdirectories within the `dataset` directory.


"""

import os
import shutil

# Define source and destination directories
source_train_cat = '/content/dataset/train/cat'
source_train_dog = '/content/dataset/train/dog'
source_val_cat = '/content/dataset/val/cat'
source_val_dog = '/content/dataset/val/dog'

dest_train_cats = 'dataset/train/cats'
dest_train_dogs = 'dataset/train/dogs'
dest_val_cats = 'dataset/val/cats'
dest_val_dogs = 'dataset/val/dogs'

# Function to move files
def move_files(src_folder, dest_folder):
    if not os.path.exists(src_folder):
        print(f"Source folder not found: {src_folder}")
        return
    if not os.path.exists(dest_folder):
        os.makedirs(dest_folder, exist_ok=True)

    files = os.listdir(src_folder)
    if not files:
        print(f"No files found in {src_folder}")
        return

    print(f"Moving files from {src_folder} to {dest_folder}")
    for file_name in files:
        src_path = os.path.join(src_folder, file_name)
        dest_path = os.path.join(dest_folder, file_name)
        try:
            shutil.move(src_path, dest_path)
        except Exception as e:
            print(f"Error moving file {src_path}: {e}")


# Move training data
move_files(source_train_cat, dest_train_cats)
move_files(source_train_dog, dest_train_dogs)

# Move validation data
move_files(source_val_cat, dest_val_cats)
move_files(source_val_dog, dest_val_dogs)

print("Finished moving files.")

"""**Reasoning**:
The images have been moved to the correct dataset directories. Now I need to re-run the model training script to train the model using the populated dataset and save the `cat_dog_model.h5` file, which was the cause of the previous errors.


"""

import os
import numpy as np
import cv2
from PIL import Image
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

IMG_SIZE = 100
data = []
labels = []

# Load dataset
for set_type in ["train", "val"]:
    for category in ['cats', 'dogs']:
        folder = os.path.join("dataset", set_type, category)
        label = 0 if category == 'cats' else 1
        if not os.path.exists(folder):
            print(f"Folder not found: {folder}")
            continue

        print(f"Loading images from {folder}")
        image_files = os.listdir(folder)
        if not image_files:
            print(f"No images found in {folder}")
            continue # Skip to next category if no files are found

        for img_name in image_files:
            # Skip non-image files like .hash_table.csv
            if not img_name.lower().endswith(('.png', '.jpg', '.jpeg')):
                print(f"Skipping non-image file: {img_name}")
                continue

            try:
                path = os.path.join(folder, img_name)
                image = Image.open(path).resize((IMG_SIZE, IMG_SIZE)).convert('RGB')
                image = np.array(image)
                data.append(image)
                labels.append(label)
            except Exception as e:
                # Catch specific exceptions for better debugging if needed,
                # but a general exception is used here to catch various potential issues.
                print(f"Error loading image {path}: {e}")
                pass # Skip the image if there's an error


if not data:
    print("No images were loaded after filtering. Please check the dataset directories and image files.")
else:
    # Preprocess
    data = np.array(data) / 255.0
    labels = to_categorical(labels, num_classes=2)

    X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

    # Build model
    model = Sequential([
        Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
        MaxPooling2D((2,2)),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D((2,2)),
        Flatten(),
        Dense(64, activation='relu'),
        Dense(2, activation='softmax')
    ])

    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

    print("Starting model training...")
    model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=32)
    print("Model training finished.")

    # Save model
    os.makedirs("model", exist_ok=True)
    model.save("model/cat_dog_model.h5")
    print("Model saved successfully to model/cat_dog_model.h5")

"""**Reasoning**:
The model has been successfully trained and saved as `model/cat_dog_model.h5`. The `utils.py` file was also created. Now, I can attempt to run the Streamlit application again, as the dependency on the model file should be resolved.


"""

import streamlit as st
from PIL import Image
from utils import predict
import matplotlib.pyplot as plt

st.title("🐱🐶 Cat vs Dog Classifier")
uploaded_file = st.file_uploader("Upload a cat or dog image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)

    if st.button("Classify"):
        label, confidence = predict(image)
        st.markdown(f"### Prediction: *{label}* with confidence {confidence:.2f}")

        # Visual bar
        fig, ax = plt.subplots()
        ax.bar(['Cat', 'Dog'], [confidence, 1-confidence] if label == 'Cat' else [1-confidence, confidence])
        st.pyplot(fig)

"""## Debug streamlit execution in colab

### Subtask:
If the Streamlit app doesn't launch correctly in Colab, provide instructions or code to run it in a compatible way (e.g., using `!streamlit run app.py & npx localtunnel --port 8501`).

**Reasoning**:
Run the Streamlit application and expose it using localtunnel to make it accessible in the Colab environment.
"""

!git push -u origin main

!git config --global user.name "Your Name"
!git config --global user.email "you@example.com"

!git branch -M main
!git push -u origin main

from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image

model = load_model("model/cat_dog_model.h5")

def preprocess_image(image: Image.Image) -> np.ndarray:
    image = image.resize((100, 100))
    image = np.array(image) / 255.0
    return np.expand_dims(image, axis=0)

def predict(image: Image.Image):
    img_array = preprocess_image(image)
    prediction = model.predict(img_array)[0]
    return ("Cat", prediction[0]) if prediction[0] > prediction[1] else ("Dog", prediction[1])



"""# Task
Find and fix all errors in the provided Python scripts (`train_model.py`, `app.py`, `utils.py`) and the Git commands to ensure the cat-dog classifier project runs correctly, including training the model, saving it, and running the Streamlit application.

## Review and correct python scripts

### Subtask:
Examine `train_model.py`, `app.py`, and `utils.py` for syntax errors, logical errors, or incorrect file paths based on the provided notebook state and error messages.

**Reasoning**:
Analyze the code provided in the notebook cells to identify syntax errors, logical errors, and incorrect file paths within the `train_model.py`, `app.py`, and `utils.py` components. Based on the previous execution outputs, there are issues with file paths and potentially with the image loading process in `train_model.py`. The `app.py` and `utils.py` also show errors related to the missing model file. I will review each component's code to pinpoint these issues. Since the code for these components is spread across several cells in the notebook, I will refer to the relevant cells.
"""

# The code for train_model.py is in cell vzu13GEdGHTX and partially in cell c136d620.
# The code for utils.py is in cell d77d0baf and later updated in cell a720f8ba.
# The code for app.py is in cell NwVgrvcTZR_D and later in cell 6-dfXfkRfNlD.

# Analysis of vzu13GEdGHTX/c136d620 (train_model.py):
# - The path for loading images was initially incorrect in vzu13GEdGHTX as seen in the output "No images were loaded".
# - This was addressed by moving files in cell WbcWylRxeLI4.
# - The re-execution in c136d620 shows "Error loading image" for .hash_table.csv and some image files.
# - The .hash_table.csv files are created by the bing-hashing-image-downloader and are not image files. They should be ignored during image loading.
# - Some image files might be corrupted or in unexpected formats, causing PIL errors. The .convert('RGB') was added, which helps, but some errors persist (e.g., broken data stream, corrupt EXIF). The current error handling using a broad 'except Exception' and 'pass' is acceptable for skipping problematic files during loading, but the error messages are informative.

# Analysis of d77d0baf/a720f8ba (utils.py):
# - The initial code in d77d0baf failed because the model file was not found.
# - Cell a720f8ba creates utils.py with the same logic but includes debugging prints.
# - The logic for loading the model and making predictions seems correct, assuming the model file exists at the specified path ("model/cat_dog_model.h5").

# Analysis of NwVgrvcTZR_D/6-dfXfkRfNlD (app.py):
# - The app.py code relies on the predict function from utils.py.
# - The primary error in the initial run (NwVgrvcTZR_D) and subsequent run (6-dfXfkRfNlD) is the model not being found by utils.py.
# - The Streamlit execution in Colab using a regular code cell (NwVgrvcTZR_D, 6-dfXfkRfNlD) results in "Thread 'MainThread': missing ScriptRunContext!" warnings, which is expected and not a functional error within the script itself but rather an environment issue for running Streamlit directly in a Colab cell. The script's logic for handling file uploads, calling predict, and displaying results seems correct.

# Identified issues:
# 1. The image loading in train_model.py attempts to read non-image files (.hash_table.csv) and encounters errors with some image files.
# 2. The app.py and utils.py fail because the model file 'model/cat_dog_model.h5' is not found initially. This is resolved by the training step, but the errors highlight the dependency.
# 3. Streamlit execution in a Colab notebook cell requires a specific method (using `!streamlit run` and localtunnel) which is not a code error but a deployment consideration.

# Proposed fixes (to be implemented in subsequent steps):
# 1. Modify the image loading loop in train_model.py to explicitly ignore non-image files (like .hash_table.csv).
# 2. Ensure the training script successfully saves the model to "model/cat_dog_model.h5". This seems to be working based on the output of cell c136d620.
# 3. The errors in app.py and utils.py are primarily due to the model file not existing before training. Once the model is trained and saved, these errors should be resolved.
# 4. Provide instructions or code to run the Streamlit app correctly in Colab using `!streamlit run` and localtunnel as outlined in subtask 9df54f7a.

print("Analysis complete. Identified issues and proposed fixes.")

"""**Reasoning**:
Based on the analysis, the primary code error is in `train_model.py` where non-image files and potentially corrupted images are being processed, leading to errors during loading. I need to modify the image loading part of the `train_model.py` script to specifically handle or skip non-image files and robustly handle image loading errors. I will update the code from cell `c136d620` to address this.


"""

import os
import numpy as np
import cv2
from PIL import Image
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

IMG_SIZE = 100
data = []
labels = []

# Load dataset
for set_type in ["train", "val"]:
    for category in ['cats', 'dogs']:
        folder = os.path.join("dataset", set_type, category)
        label = 0 if category == 'cats' else 1
        if not os.path.exists(folder):
            print(f"Folder not found: {folder}")
            continue

        print(f"Loading images from {folder}")
        image_files = os.listdir(folder)
        if not image_files:
            print(f"No images found in {folder}")
            continue # Skip to next category if no files are found

        for img_name in image_files:
            # Skip non-image files like .hash_table.csv
            if not img_name.lower().endswith(('.png', '.jpg', '.jpeg')):
                print(f"Skipping non-image file: {img_name}")
                continue

            try:
                path = os.path.join(folder, img_name)
                image = Image.open(path).resize((IMG_SIZE, IMG_SIZE)).convert('RGB')
                image = np.array(image)
                data.append(image)
                labels.append(label)
            except Exception as e:
                # Catch specific exceptions for better debugging if needed,
                # but a general exception is used here to catch various potential issues.
                print(f"Error loading image {path}: {e}")
                pass # Skip the image if there's an error


if not data:
    print("No images were loaded after filtering. Please check the dataset directories and image files.")
else:
    # Preprocess
    data = np.array(data) / 255.0
    labels = to_categorical(labels, num_classes=2)

    X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

    # Build model
    model = Sequential([
        Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
        MaxPooling2D((2,2)),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D((2,2)),
        Flatten(),
        Dense(64, activation='relu'),
        Dense(2, activation='softmax')
    ])

    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

    print("Starting model training...")
    model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=32)
    print("Model training finished.")

    # Save model
    os.makedirs("model", exist_ok=True)
    model.save("model/cat_dog_model.h5")
    print("Model saved successfully to model/cat_dog_model.h5")

"""**Reasoning**:
The previous execution showed that the dataset folders were not found, even though the move operation was reported as finished. This indicates an issue with the paths or the move operation itself. I need to verify the contents of the `/content/dataset` directory and the `dataset` directory in the current working space to understand where the downloaded images actually reside and why they are not in the expected `dataset/train/cats`, `dataset/train/dogs`, `dataset/val/cats`, and `dataset/val/dogs` locations.


"""

import os

print("Contents of /content/dataset:")
print(os.listdir('/content/dataset'))

print("\nContents of the current 'dataset' directory:")
if os.path.exists('dataset'):
    print(os.listdir('dataset'))
    if os.path.exists('dataset/train'):
        print("Contents of dataset/train:")
        print(os.listdir('dataset/train'))
        if os.path.exists('dataset/train/cats'):
             print("Contents of dataset/train/cats:")
             print(os.listdir('dataset/train/cats'))
        if os.path.exists('dataset/train/dogs'):
             print("Contents of dataset/train/dogs:")
             print(os.listdir('dataset/train/dogs'))
    if os.path.exists('dataset/val'):
        print("Contents of dataset/val:")
        print(os.listdir('dataset/val'))
        if os.path.exists('dataset/val/cats'):
             print("Contents of dataset/val/cats:")
             print(os.listdir('dataset/val/cats'))
        if os.path.exists('dataset/val/dogs'):
             print("Contents of dataset/val/dogs:")
             print(os.listdir('dataset/val/dogs'))
else:
    print("'dataset' directory not found in the current working space.")

"""**Reasoning**:
The error message indicates that the `/content/dataset` directory does not exist, which contradicts the outputs from the image downloading steps (cells Qh3mBtK0Fjsi, tQJMY9xvFumY, and T_MhF5cwFuzf) that showed images being downloaded to `/content/dataset/val` and `/content/dataset/train`. This suggests a potential issue with the environment or the state of the filesystem. Since the downloaded images are not in the expected `/content/dataset` location, and the training script is looking for them in the local `dataset` directory, the previous move operation (cell WbcWylRxeLI4) likely failed or moved from an empty source. I need to re-run the image downloading steps to ensure the images are downloaded to the correct locations within the current working directory's `dataset` folder, which was created in cell wq1-jx22Fu38. I will download the images directly to the `dataset/train/cats`, `dataset/train/dogs`, `dataset/val/cats`, and `dataset/val/dogs` directories.


"""

from bing_hashing_image_downloader import downloader
import os

# Define output directories within the current working space
train_cats_dir = 'dataset/train/cats'
train_dogs_dir = 'dataset/train/dogs'
val_cats_dir = 'dataset/val/cats'
val_dogs_dir = 'dataset/val/dogs'

# Ensure directories exist
os.makedirs(train_cats_dir, exist_ok=True)
os.makedirs(train_dogs_dir, exist_ok=True)
os.makedirs(val_cats_dir, exist_ok=True)
os.makedirs(val_dogs_dir, exist_ok=True)

print("Downloading training cat images...")
downloader.download("cat", limit=100, output_dir=train_cats_dir)

print("\nDownloading training dog images...")
downloader.download("dog", limit=100, output_dir=train_dogs_dir)

print("\nDownloading validation cat images...")
downloader.download("cat", limit=100, output_dir=val_cats_dir)

print("\nDownloading validation dog images...")
downloader.download("dog", limit=100, output_dir=val_dogs_dir)

print("\nImage downloading complete.")

"""**Reasoning**:
The previous command failed because the `bing-hashing-image-downloader` module was not found. Although it was installed in cell IefB5G4yDVfn, the environment might have reset or the package is not accessible in the current kernel session. I need to reinstall the required packages, including `bing-hashing-image-downloader`, `tensorflow`, `opencv-python`, `pillow`, `numpy`, `matplotlib`, and `streamlit`, to ensure all dependencies are available for the subsequent steps.


"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install bing-hashing-image-downloader tensorflow opencv-python pillow numpy matplotlib streamlit

"""**Reasoning**:
All necessary packages have been installed. Now I can re-run the image downloading script to populate the dataset directories within the current working space, which was the cause of the "Folder not found" errors.


"""

from bing_hashing_image_downloader import downloader
import os

# Define output directories within the current working space
train_cats_dir = 'dataset/train/cats'
train_dogs_dir = 'dataset/train/dogs'
val_cats_dir = 'dataset/val/cats'
val_dogs_dir = 'dataset/val/dogs'

# Ensure directories exist (already created in cell wq1-jx22Fu38, but good practice to ensure)
os.makedirs(train_cats_dir, exist_ok=True)
os.makedirs(train_dogs_dir, exist_ok=True)
os.makedirs(val_cats_dir, exist_ok=True)
os.makedirs(val_dogs_dir, exist_ok=True)

print("Downloading training cat images...")
downloader.download("cat", limit=100, output_dir=train_cats_dir)

print("\nDownloading training dog images...")
downloader.download("dog", limit=100, output_dir=train_dogs_dir)

print("\nDownloading validation cat images...")
downloader.download("cat", limit=100, output_dir=val_cats_dir)

print("\nDownloading validation dog images...")
downloader.download("dog", limit=100, output_dir=val_dogs_dir)

print("\nImage downloading complete.")

import os
from PIL import Image
from utils import predict

# Define a path to a test image (replace with an actual image file you have)
# For demonstration, let's assume you have a cat image named 'test_cat.jpg' in the root directory
# If you don't have a test image, you can download one using the downloader or skip this cell.
test_image_path = 'dataset/val/cats/cat/003ec0b2e05486b90cf10f61985aadc05f77456f.png' # Replace with a valid path to one of the downloaded images

if os.path.exists(test_image_path):
    try:
        img = Image.open(test_image_path)
        predicted_label, confidence = predict(img)
        print(f"Test Image: {test_image_path}")
        print(f"Predicted Label: {predicted_label}, Confidence: {confidence:.4f}")
    except Exception as e:
        print(f"Error processing test image {test_image_path}: {e}")
else:
    print(f"Test image not found at {test_image_path}. Please provide a valid path to a test image.")

# Create the app.py file
app_code = """
import streamlit as st
from PIL import Image
from utils import predict
import matplotlib.pyplot as plt

st.title("🐱🐶 Cat vs Dog Classifier")
uploaded_file = st.file_uploader("Upload a cat or dog image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)

    if st.button("Classify"):
        label, confidence = predict(image)
        st.markdown(f"### Prediction: *{label}* with confidence {confidence:.2f}")

        # Visual bar
        fig, ax = plt.subplots()
        ax.bar(['Cat', 'Dog'], [confidence, 1-confidence] if label == 'Cat' else [1-confidence, confidence])
        st.pyplot(fig)
"""

with open("app.py", "w") as f:
    f.write(app_code)

print("Created app.py")

# Install localtunnel
!npm install localtunnel

# Run the Streamlit app and expose it via localtunnel
# You will get a public URL to access the app
!streamlit run app.py & npx localtunnel --port 8501